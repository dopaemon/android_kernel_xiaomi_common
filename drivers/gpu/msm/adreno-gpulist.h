/* SPDX-License-Identifier: GPL-2.0-only */
/*
 * Copyright (c) 2002,2007-2021, The Linux Foundation. All rights reserved.
 * Copyright (c) 2022-2024, Qualcomm Innovation Center, Inc. All rights reserved.
 */

#define ANY_ID (~0)

#define DEFINE_ADRENO_REV(_rev, _core, _major, _minor, _patchid) \
	.gpurev = _rev, .core = _core, .major = _major, .minor = _minor, \
	.patchid = _patchid

#define DEFINE_DEPRECATED_CORE(_name, _rev, _core, _major, _minor, _patchid) \
static const struct adreno_gpu_core adreno_gpu_core_##_name = { \
	DEFINE_ADRENO_REV(_rev, _core, _major, _minor, _patchid), \
	.features = ADRENO_DEPRECATED, \
}

DEFINE_DEPRECATED_CORE(a630v1, ADRENO_REV_A630, 6, 3, 0, 0);

static const struct kgsl_regmap_list a630_hwcg_regs[] = {
	{A6XX_RBBM_CLOCK_CNTL_SP0, 0x02222222},
	{A6XX_RBBM_CLOCK_CNTL_SP1, 0x02222222},
	{A6XX_RBBM_CLOCK_CNTL_SP2, 0x02222222},
	{A6XX_RBBM_CLOCK_CNTL_SP3, 0x02222222},
	{A6XX_RBBM_CLOCK_CNTL2_SP0, 0x02022220},
	{A6XX_RBBM_CLOCK_CNTL2_SP1, 0x02022220},
	{A6XX_RBBM_CLOCK_CNTL2_SP2, 0x02022220},
	{A6XX_RBBM_CLOCK_CNTL2_SP3, 0x02022220},
	{A6XX_RBBM_CLOCK_DELAY_SP0, 0x00000080},
	{A6XX_RBBM_CLOCK_DELAY_SP1, 0x00000080},
	{A6XX_RBBM_CLOCK_DELAY_SP2, 0x00000080},
	{A6XX_RBBM_CLOCK_DELAY_SP3, 0x00000080},
	{A6XX_RBBM_CLOCK_HYST_SP0, 0x0000F3CF},
	{A6XX_RBBM_CLOCK_HYST_SP1, 0x0000F3CF},
	{A6XX_RBBM_CLOCK_HYST_SP2, 0x0000F3CF},
	{A6XX_RBBM_CLOCK_HYST_SP3, 0x0000F3CF},
	{A6XX_RBBM_CLOCK_CNTL_TP0, 0x02222222},
	{A6XX_RBBM_CLOCK_CNTL_TP1, 0x02222222},
	{A6XX_RBBM_CLOCK_CNTL_TP2, 0x02222222},
	{A6XX_RBBM_CLOCK_CNTL_TP3, 0x02222222},
	{A6XX_RBBM_CLOCK_CNTL2_TP0, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL2_TP1, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL2_TP2, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL2_TP3, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL3_TP0, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL3_TP1, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL3_TP2, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL3_TP3, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL4_TP0, 0x00022222},
	{A6XX_RBBM_CLOCK_CNTL4_TP1, 0x00022222},
	{A6XX_RBBM_CLOCK_CNTL4_TP2, 0x00022222},
	{A6XX_RBBM_CLOCK_CNTL4_TP3, 0x00022222},
	{A6XX_RBBM_CLOCK_HYST_TP0, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST_TP1, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST_TP2, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST_TP3, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST2_TP0, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST2_TP1, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST2_TP2, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST2_TP3, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST3_TP0, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST3_TP1, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST3_TP2, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST3_TP3, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST4_TP0, 0x00077777},
	{A6XX_RBBM_CLOCK_HYST4_TP1, 0x00077777},
	{A6XX_RBBM_CLOCK_HYST4_TP2, 0x00077777},
	{A6XX_RBBM_CLOCK_HYST4_TP3, 0x00077777},
	{A6XX_RBBM_CLOCK_DELAY_TP0, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY_TP1, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY_TP2, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY_TP3, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY2_TP0, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY2_TP1, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY2_TP2, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY2_TP3, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY3_TP0, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY3_TP1, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY3_TP2, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY3_TP3, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY4_TP0, 0x00011111},
	{A6XX_RBBM_CLOCK_DELAY4_TP1, 0x00011111},
	{A6XX_RBBM_CLOCK_DELAY4_TP2, 0x00011111},
	{A6XX_RBBM_CLOCK_DELAY4_TP3, 0x00011111},
	{A6XX_RBBM_CLOCK_CNTL_UCHE, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL2_UCHE, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL3_UCHE, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL4_UCHE, 0x00222222},
	{A6XX_RBBM_CLOCK_HYST_UCHE, 0x00000004},
	{A6XX_RBBM_CLOCK_DELAY_UCHE, 0x00000002},
	{A6XX_RBBM_CLOCK_CNTL_RB0, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL_RB1, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL_RB2, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL_RB3, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL2_RB0, 0x00002222},
	{A6XX_RBBM_CLOCK_CNTL2_RB1, 0x00002222},
	{A6XX_RBBM_CLOCK_CNTL2_RB2, 0x00002222},
	{A6XX_RBBM_CLOCK_CNTL2_RB3, 0x00002222},
	{A6XX_RBBM_CLOCK_CNTL_CCU0, 0x00002220},
	{A6XX_RBBM_CLOCK_CNTL_CCU1, 0x00002220},
	{A6XX_RBBM_CLOCK_CNTL_CCU2, 0x00002220},
	{A6XX_RBBM_CLOCK_CNTL_CCU3, 0x00002220},
	{A6XX_RBBM_CLOCK_HYST_RB_CCU0, 0x00040F00},
	{A6XX_RBBM_CLOCK_HYST_RB_CCU1, 0x00040F00},
	{A6XX_RBBM_CLOCK_HYST_RB_CCU2, 0x00040F00},
	{A6XX_RBBM_CLOCK_HYST_RB_CCU3, 0x00040F00},
	{A6XX_RBBM_CLOCK_CNTL_RAC, 0x05022022},
	{A6XX_RBBM_CLOCK_CNTL2_RAC, 0x00005555},
	{A6XX_RBBM_CLOCK_DELAY_RAC, 0x00000011},
	{A6XX_RBBM_CLOCK_HYST_RAC, 0x00445044},
	{A6XX_RBBM_CLOCK_CNTL_TSE_RAS_RBBM, 0x04222222},
	{A6XX_RBBM_CLOCK_MODE_GPC, 0x00222222},
	{A6XX_RBBM_CLOCK_MODE_VFD, 0x00002222},
	{A6XX_RBBM_CLOCK_HYST_TSE_RAS_RBBM, 0x00000000},
	{A6XX_RBBM_CLOCK_HYST_GPC, 0x04104004},
	{A6XX_RBBM_CLOCK_HYST_VFD, 0x00000000},
	{A6XX_RBBM_CLOCK_DELAY_HLSQ, 0x00000000},
	{A6XX_RBBM_CLOCK_DELAY_TSE_RAS_RBBM, 0x00004000},
	{A6XX_RBBM_CLOCK_DELAY_GPC, 0x00000200},
	{A6XX_RBBM_CLOCK_DELAY_VFD, 0x00002222},
	{A6XX_RBBM_CLOCK_DELAY_HLSQ_2, 0x00000002},
	{A6XX_RBBM_CLOCK_MODE_HLSQ, 0x00002222},
	{A6XX_RBBM_CLOCK_CNTL_GMU_GX, 0x00000222},
	{A6XX_RBBM_CLOCK_DELAY_GMU_GX, 0x00000111},
	{A6XX_RBBM_CLOCK_HYST_GMU_GX, 0x00000555},
};

static const struct kgsl_regmap_list a630_vbif_regs[] = {
	{A6XX_VBIF_GATE_OFF_WRREQ_EN, 0x00000009},
	{A6XX_RBBM_VBIF_CLIENT_QOS_CNTL, 0x3},
};


/* For a615, a616, a618, A619, a630, a640 and a680 */
static const struct adreno_protected_regs a630_protected_regs[] = {
	{ A6XX_CP_PROTECT_REG + 0, 0x00000, 0x004ff, 0 },
	{ A6XX_CP_PROTECT_REG + 1, 0x00501, 0x00506, 0 },
	{ A6XX_CP_PROTECT_REG + 2, 0x0050b, 0x007ff, 0 },
	{ A6XX_CP_PROTECT_REG + 3, 0x0050e, 0x0050e, 1 },
	{ A6XX_CP_PROTECT_REG + 4, 0x00510, 0x00510, 1 },
	{ A6XX_CP_PROTECT_REG + 5, 0x00534, 0x00534, 1 },
	{ A6XX_CP_PROTECT_REG + 6, 0x00800, 0x00882, 1 },
	{ A6XX_CP_PROTECT_REG + 7, 0x008a0, 0x008a8, 1 },
	{ A6XX_CP_PROTECT_REG + 8, 0x008ab, 0x008cf, 1 },
	{ A6XX_CP_PROTECT_REG + 9, 0x008d0, 0x0098c, 0 },
	{ A6XX_CP_PROTECT_REG + 10, 0x00900, 0x0094d, 1 },
	{ A6XX_CP_PROTECT_REG + 11, 0x0098d, 0x00bff, 1 },
	{ A6XX_CP_PROTECT_REG + 12, 0x00e00, 0x00e01, 1 },
	{ A6XX_CP_PROTECT_REG + 13, 0x00e03, 0x00e0f, 1 },
	{ A6XX_CP_PROTECT_REG + 14, 0x03c00, 0x03cc3, 1 },
	{ A6XX_CP_PROTECT_REG + 15, 0x03cc4, 0x05cc3, 0 },
	{ A6XX_CP_PROTECT_REG + 16, 0x08630, 0x087ff, 1 },
	{ A6XX_CP_PROTECT_REG + 17, 0x08e00, 0x08e00, 1 },
	{ A6XX_CP_PROTECT_REG + 18, 0x08e08, 0x08e08, 1 },
	{ A6XX_CP_PROTECT_REG + 19, 0x08e50, 0x08e6f, 1 },
	{ A6XX_CP_PROTECT_REG + 20, 0x09624, 0x097ff, 1 },
	{ A6XX_CP_PROTECT_REG + 21, 0x09e70, 0x09e71, 1 },
	{ A6XX_CP_PROTECT_REG + 22, 0x09e78, 0x09fff, 1 },
	{ A6XX_CP_PROTECT_REG + 23, 0x0a630, 0x0a7ff, 1 },
	{ A6XX_CP_PROTECT_REG + 24, 0x0ae02, 0x0ae02, 1 },
	{ A6XX_CP_PROTECT_REG + 25, 0x0ae50, 0x0b17f, 1 },
	{ A6XX_CP_PROTECT_REG + 26, 0x0b604, 0x0b604, 1 },
	{ A6XX_CP_PROTECT_REG + 27, 0x0be02, 0x0be03, 1 },
	{ A6XX_CP_PROTECT_REG + 28, 0x0be20, 0x0d5ff, 1 },
	{ A6XX_CP_PROTECT_REG + 29, 0x0f000, 0x0fbff, 1 },
	{ A6XX_CP_PROTECT_REG + 30, 0x0fc00, 0x11bff, 0 },
	{ A6XX_CP_PROTECT_REG + 31, 0x11c00, 0x11c00, 1 },
	{ 0 },
};

static const struct adreno_a6xx_core adreno_gpu_core_a630v2 = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_A630, 6, 3, 0, ANY_ID),
		.features = ADRENO_IFPC | ADRENO_CONTENT_PROTECTION |
			ADRENO_IOCOHERENT | ADRENO_PREEMPTION,
		.gpudev = &adreno_a630_gpudev.base,
		.perfcounters = &adreno_a630_perfcounters,
		.uche_gmem_alignment = SZ_1M,
		.gmem_size = SZ_1M,
		.bus_width = 32,
		.snapshot_size = SZ_1M,
	},
	.prim_fifo_threshold = 0x0018000,
	.gmu_major = 1,
	.gmu_minor = 3,
	.sqefw_name = "a630_sqe.fw",
	.gmufw_name = "a630_gmu.bin",
	.zap_name = "a630_zap",
	.hwcg = a630_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(a630_hwcg_regs),
	.vbif = a630_vbif_regs,
	.vbif_count = ARRAY_SIZE(a630_vbif_regs),
	.hang_detect_cycles = 0xcfffff,
	.protected_regs = a630_protected_regs,
	.highest_bank_bit = 15,
};

/* For a615, a616, a618 and a619 */
static const struct kgsl_regmap_list a615_hwcg_regs[] = {
	{A6XX_RBBM_CLOCK_CNTL_SP0,  0x02222222},
	{A6XX_RBBM_CLOCK_CNTL2_SP0, 0x02222220},
	{A6XX_RBBM_CLOCK_DELAY_SP0, 0x00000080},
	{A6XX_RBBM_CLOCK_HYST_SP0,  0x0000F3CF},
	{A6XX_RBBM_CLOCK_CNTL_TP0,  0x02222222},
	{A6XX_RBBM_CLOCK_CNTL_TP1,  0x02222222},
	{A6XX_RBBM_CLOCK_CNTL2_TP0, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL2_TP1, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL3_TP0, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL3_TP1, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL4_TP0, 0x00022222},
	{A6XX_RBBM_CLOCK_CNTL4_TP1, 0x00022222},
	{A6XX_RBBM_CLOCK_HYST_TP0,  0x77777777},
	{A6XX_RBBM_CLOCK_HYST_TP1,  0x77777777},
	{A6XX_RBBM_CLOCK_HYST2_TP0, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST2_TP1, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST3_TP0, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST3_TP1, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST4_TP0, 0x00077777},
	{A6XX_RBBM_CLOCK_HYST4_TP1, 0x00077777},
	{A6XX_RBBM_CLOCK_DELAY_TP0, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY_TP1, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY2_TP0, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY2_TP1, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY3_TP0, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY3_TP1, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY4_TP0, 0x00011111},
	{A6XX_RBBM_CLOCK_DELAY4_TP1, 0x00011111},
	{A6XX_RBBM_CLOCK_CNTL_UCHE,  0x22222222},
	{A6XX_RBBM_CLOCK_CNTL2_UCHE, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL3_UCHE, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL4_UCHE, 0x00222222},
	{A6XX_RBBM_CLOCK_HYST_UCHE,  0x00000004},
	{A6XX_RBBM_CLOCK_DELAY_UCHE, 0x00000002},
	{A6XX_RBBM_CLOCK_CNTL_RB0, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL2_RB0, 0x00002222},
	{A6XX_RBBM_CLOCK_CNTL_CCU0, 0x00002220},
	{A6XX_RBBM_CLOCK_CNTL_CCU1, 0x00002220},
	{A6XX_RBBM_CLOCK_CNTL_CCU2, 0x00002220},
	{A6XX_RBBM_CLOCK_CNTL_CCU3, 0x00002220},
	{A6XX_RBBM_CLOCK_HYST_RB_CCU0, 0x00040F00},
	{A6XX_RBBM_CLOCK_HYST_RB_CCU1, 0x00040F00},
	{A6XX_RBBM_CLOCK_HYST_RB_CCU2, 0x00040F00},
	{A6XX_RBBM_CLOCK_HYST_RB_CCU3, 0x00040F00},
	{A6XX_RBBM_CLOCK_CNTL_RAC, 0x05022022},
	{A6XX_RBBM_CLOCK_CNTL2_RAC, 0x00005555},
	{A6XX_RBBM_CLOCK_DELAY_RAC, 0x00000011},
	{A6XX_RBBM_CLOCK_HYST_RAC, 0x00445044},
	{A6XX_RBBM_CLOCK_CNTL_TSE_RAS_RBBM, 0x04222222},
	{A6XX_RBBM_CLOCK_MODE_GPC, 0x00222222},
	{A6XX_RBBM_CLOCK_MODE_VFD, 0x00002222},
	{A6XX_RBBM_CLOCK_HYST_TSE_RAS_RBBM, 0x00000000},
	{A6XX_RBBM_CLOCK_HYST_GPC, 0x04104004},
	{A6XX_RBBM_CLOCK_HYST_VFD, 0x00000000},
	{A6XX_RBBM_CLOCK_DELAY_HLSQ, 0x00000000},
	{A6XX_RBBM_CLOCK_DELAY_TSE_RAS_RBBM, 0x00004000},
	{A6XX_RBBM_CLOCK_DELAY_GPC, 0x00000200},
	{A6XX_RBBM_CLOCK_DELAY_VFD, 0x00002222},
	{A6XX_RBBM_CLOCK_DELAY_HLSQ_2, 0x00000002},
	{A6XX_RBBM_CLOCK_MODE_HLSQ, 0x00002222},
	{A6XX_RBBM_CLOCK_CNTL_GMU_GX, 0x00000222},
	{A6XX_RBBM_CLOCK_DELAY_GMU_GX, 0x00000111},
	{A6XX_RBBM_CLOCK_HYST_GMU_GX, 0x00000555}
};

/* For a615, a616, a618 and a619 */
static const struct kgsl_regmap_list a615_gbif_regs[] = {
	{A6XX_RBBM_VBIF_CLIENT_QOS_CNTL, 0x3},
};

static const struct adreno_a6xx_core adreno_gpu_core_a615 = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_A615, 6, 1, 5, ANY_ID),
		.features = ADRENO_PREEMPTION |
			ADRENO_CONTENT_PROTECTION | ADRENO_IFPC |
			ADRENO_IOCOHERENT,
		.gpudev = &adreno_a630_gpudev.base,
		.perfcounters = &adreno_a6xx_legacy_perfcounters,
		.uche_gmem_alignment = SZ_1M,
		.gmem_size = SZ_512K,
		.bus_width = 32,
		.snapshot_size = 600 * SZ_1K,
	},
	.prim_fifo_threshold = 0x0018000,
	.gmu_major = 1,
	.gmu_minor = 3,
	.sqefw_name = "a630_sqe.fw",
	.gmufw_name = "a630_gmu.bin",
	.zap_name = "a615_zap",
	.hwcg = a615_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(a615_hwcg_regs),
	.vbif = a615_gbif_regs,
	.vbif_count = ARRAY_SIZE(a615_gbif_regs),
	.hang_detect_cycles = 0xcfffff,
	.protected_regs = a630_protected_regs,
	.highest_bank_bit = 14,
};

static const struct adreno_a6xx_core adreno_gpu_core_a618 = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_A618, 6, 1, 8, ANY_ID),
		.features = ADRENO_PREEMPTION |
			ADRENO_CONTENT_PROTECTION | ADRENO_IFPC |
			ADRENO_IOCOHERENT,
		.gpudev = &adreno_a630_gpudev.base,
		.perfcounters = &adreno_a6xx_legacy_perfcounters,
		.uche_gmem_alignment = SZ_1M,
		.gmem_size = SZ_512K,
		.bus_width = 32,
		.snapshot_size = SZ_1M,
	},
	.prim_fifo_threshold = 0x0018000,
	.gmu_major = 1,
	.gmu_minor = 7,
	.sqefw_name = "a630_sqe.fw",
	.gmufw_name = "a630_gmu.bin",
	.zap_name = "a615_zap",
	.hwcg = a615_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(a615_hwcg_regs),
	.vbif = a615_gbif_regs,
	.vbif_count = ARRAY_SIZE(a615_gbif_regs),
	.hang_detect_cycles = 0x3fffff,
	.protected_regs = a630_protected_regs,
	.highest_bank_bit = 14,
};

static const struct adreno_a6xx_core adreno_gpu_core_a619 = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_A619, 6, 1, 9, ANY_ID),
		.features = ADRENO_PREEMPTION |
			ADRENO_CONTENT_PROTECTION | ADRENO_IFPC |
			ADRENO_IOCOHERENT,
		.gpudev = &adreno_a630_gpudev.base,
		.perfcounters = &adreno_a6xx_legacy_perfcounters,
		.uche_gmem_alignment = SZ_1M,
		.gmem_size = SZ_512K,
		.bus_width = 32,
		.snapshot_size = SZ_2M,
	},
	.prim_fifo_threshold = 0x0018000,
	.gmu_major = 1,
	.gmu_minor = 9,
	.sqefw_name = "a630_sqe.fw",
	.gmufw_name = "a619_gmu.bin",
	.zap_name = "a615_zap",
	.hwcg = a615_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(a615_hwcg_regs),
	.vbif = a615_gbif_regs,
	.vbif_count = ARRAY_SIZE(a615_gbif_regs),
	.hang_detect_cycles = 0x3fffff,
	.protected_regs = a630_protected_regs,
	.highest_bank_bit = 14,
};

static const struct adreno_a6xx_core adreno_gpu_core_a619_variant = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_A619, 6, 1, 9, ANY_ID),
		.compatible = "qcom,adreno-gpu-a619-holi",
		.features =  ADRENO_PREEMPTION | ADRENO_CONTENT_PROTECTION,
		.gpudev = &adreno_a619_holi_gpudev,
		.perfcounters = &adreno_a6xx_legacy_perfcounters,
		.uche_gmem_alignment = SZ_1M,
		.gmem_size = SZ_512K,
		.bus_width = 32,
		.snapshot_size = SZ_2M,
	},
	.prim_fifo_threshold = 0x0018000,
	.sqefw_name = "a630_sqe.fw",
	.zap_name = "a615_zap",
	.hwcg = a615_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(a615_hwcg_regs),
	.vbif = a615_gbif_regs,
	.vbif_count = ARRAY_SIZE(a615_gbif_regs),
	.hang_detect_cycles = 0x3fffff,
	.protected_regs = a630_protected_regs,
	.gx_cpr_toggle = true,
	.highest_bank_bit = 14,
};

static const struct kgsl_regmap_list a620_hwcg_regs[] = {
	{A6XX_RBBM_CLOCK_CNTL_SP0, 0x02222222},
	{A6XX_RBBM_CLOCK_CNTL2_SP0, 0x02222220},
	{A6XX_RBBM_CLOCK_DELAY_SP0, 0x00000080},
	{A6XX_RBBM_CLOCK_HYST_SP0, 0x0000F3CF},
	{A6XX_RBBM_CLOCK_CNTL_TP0, 0x02222222},
	{A6XX_RBBM_CLOCK_CNTL2_TP0, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL3_TP0, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL4_TP0, 0x00022222},
	{A6XX_RBBM_CLOCK_DELAY_TP0, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY2_TP0, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY3_TP0, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY4_TP0, 0x00011111},
	{A6XX_RBBM_CLOCK_HYST_TP0, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST2_TP0, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST3_TP0, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST4_TP0, 0x00077777},
	{A6XX_RBBM_CLOCK_CNTL_RB0, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL2_RB0, 0x01002222},
	{A6XX_RBBM_CLOCK_CNTL_CCU0, 0x00002220},
	{A6XX_RBBM_CLOCK_HYST_RB_CCU0, 0x00040F00},
	{A6XX_RBBM_CLOCK_CNTL_RAC, 0x25222022},
	{A6XX_RBBM_CLOCK_CNTL2_RAC, 0x00005555},
	{A6XX_RBBM_CLOCK_DELAY_RAC, 0x00000011},
	{A6XX_RBBM_CLOCK_HYST_RAC, 0x00445044},
	{A6XX_RBBM_CLOCK_CNTL_TSE_RAS_RBBM, 0x04222222},
	{A6XX_RBBM_CLOCK_MODE_VFD, 0x00002222},
	{A6XX_RBBM_CLOCK_MODE_GPC, 0x00222222},
	{A6XX_RBBM_CLOCK_DELAY_HLSQ_2, 0x00000002},
	{A6XX_RBBM_CLOCK_MODE_HLSQ, 0x00002222},
	{A6XX_RBBM_CLOCK_DELAY_TSE_RAS_RBBM, 0x00004000},
	{A6XX_RBBM_CLOCK_DELAY_VFD, 0x00002222},
	{A6XX_RBBM_CLOCK_DELAY_GPC, 0x00000200},
	{A6XX_RBBM_CLOCK_DELAY_HLSQ, 0x00000000},
	{A6XX_RBBM_CLOCK_HYST_TSE_RAS_RBBM, 0x00000000},
	{A6XX_RBBM_CLOCK_HYST_VFD, 0x00000000},
	{A6XX_RBBM_CLOCK_HYST_GPC, 0x04104004},
	{A6XX_RBBM_CLOCK_HYST_HLSQ, 0x00000000},
	{A6XX_RBBM_CLOCK_CNTL_TEX_FCHE, 0x00000222},
	{A6XX_RBBM_CLOCK_DELAY_TEX_FCHE, 0x00000111},
	{A6XX_RBBM_CLOCK_HYST_TEX_FCHE, 0x00000777},
	{A6XX_RBBM_CLOCK_CNTL_UCHE, 0x22222222},
	{A6XX_RBBM_CLOCK_HYST_UCHE, 0x00000004},
	{A6XX_RBBM_CLOCK_DELAY_UCHE, 0x00000002},
	{A6XX_RBBM_ISDB_CNT, 0x00000182},
	{A6XX_RBBM_RAC_THRESHOLD_CNT, 0x00000000},
	{A6XX_RBBM_SP_HYST_CNT, 0x00000000},
	{A6XX_RBBM_CLOCK_CNTL_GMU_GX, 0x00000222},
	{A6XX_RBBM_CLOCK_DELAY_GMU_GX, 0x00000111},
	{A6XX_RBBM_CLOCK_HYST_GMU_GX, 0x00000555},
};

/* a620, a621 and a650 */
static const struct kgsl_regmap_list a650_gbif_regs[] = {
	{A6XX_GBIF_QSB_SIDE0, 0x00071620},
	{A6XX_GBIF_QSB_SIDE1, 0x00071620},
	{A6XX_GBIF_QSB_SIDE2, 0x00071620},
	{A6XX_GBIF_QSB_SIDE3, 0x00071620},
	{A6XX_RBBM_GBIF_CLIENT_QOS_CNTL, 0x3},
};

/* These are for a620, a621 and a650 */
static const struct adreno_protected_regs a620_protected_regs[] = {
	{ A6XX_CP_PROTECT_REG + 0, 0x00000, 0x004ff, 0 },
	{ A6XX_CP_PROTECT_REG + 1, 0x00501, 0x00506, 0 },
	{ A6XX_CP_PROTECT_REG + 2, 0x0050b, 0x007ff, 0 },
	{ A6XX_CP_PROTECT_REG + 3, 0x0050e, 0x0050e, 1 },
	{ A6XX_CP_PROTECT_REG + 4, 0x00510, 0x00510, 1 },
	{ A6XX_CP_PROTECT_REG + 5, 0x00534, 0x00534, 1 },
	{ A6XX_CP_PROTECT_REG + 6, 0x00800, 0x00882, 1 },
	{ A6XX_CP_PROTECT_REG + 7, 0x008a0, 0x008a8, 1 },
	{ A6XX_CP_PROTECT_REG + 8, 0x008ab, 0x008cf, 1 },
	{ A6XX_CP_PROTECT_REG + 9, 0x008d0, 0x0098c, 0 },
	{ A6XX_CP_PROTECT_REG + 10, 0x00900, 0x0094d, 1 },
	{ A6XX_CP_PROTECT_REG + 11, 0x0098d, 0x00bff, 1 },
	{ A6XX_CP_PROTECT_REG + 12, 0x00e00, 0x00e01, 1 },
	{ A6XX_CP_PROTECT_REG + 13, 0x00e03, 0x00e0f, 1 },
	{ A6XX_CP_PROTECT_REG + 14, 0x03c00, 0x03cc3, 1 },
	{ A6XX_CP_PROTECT_REG + 15, 0x03cc4, 0x05cc3, 0 },
	{ A6XX_CP_PROTECT_REG + 16, 0x08630, 0x087ff, 1 },
	{ A6XX_CP_PROTECT_REG + 17, 0x08e00, 0x08e00, 1 },
	{ A6XX_CP_PROTECT_REG + 18, 0x08e08, 0x08e08, 1 },
	{ A6XX_CP_PROTECT_REG + 19, 0x08e50, 0x08e6f, 1 },
	{ A6XX_CP_PROTECT_REG + 20, 0x08e80, 0x090ff, 1 },
	{ A6XX_CP_PROTECT_REG + 21, 0x09624, 0x097ff, 1 },
	{ A6XX_CP_PROTECT_REG + 22, 0x09e60, 0x09e71, 1 },
	{ A6XX_CP_PROTECT_REG + 23, 0x09e78, 0x09fff, 1 },
	{ A6XX_CP_PROTECT_REG + 24, 0x0a630, 0x0a7ff, 1 },
	{ A6XX_CP_PROTECT_REG + 25, 0x0ae02, 0x0ae02, 1 },
	{ A6XX_CP_PROTECT_REG + 26, 0x0ae50, 0x0b17f, 1 },
	{ A6XX_CP_PROTECT_REG + 27, 0x0b604, 0x0b604, 1 },
	{ A6XX_CP_PROTECT_REG + 28, 0x0b608, 0x0b60f, 1 },
	{ A6XX_CP_PROTECT_REG + 29, 0x0be02, 0x0be03, 1 },
	{ A6XX_CP_PROTECT_REG + 30, 0x0be20, 0x0d5ff, 1 },
	{ A6XX_CP_PROTECT_REG + 31, 0x0f000, 0x0fbff, 1 },
	{ A6XX_CP_PROTECT_REG + 32, 0x0fc00, 0x11bff, 0 },
	{ A6XX_CP_PROTECT_REG + 33, 0x18400, 0x1a3ff, 1 },
	{ A6XX_CP_PROTECT_REG + 34, 0x1a800, 0x1c7ff, 1 },
	{ A6XX_CP_PROTECT_REG + 35, 0x1c800, 0x1e7ff, 1 },
	{ A6XX_CP_PROTECT_REG + 36, 0x1f400, 0x1f843, 1 },
	{ A6XX_CP_PROTECT_REG + 37, 0x1f844, 0x1f8bf, 0 },
	{ A6XX_CP_PROTECT_REG + 38, 0x1f887, 0x1f8a2, 1 },
	{ A6XX_CP_PROTECT_REG + 47, 0x1f8c0, 0x1f8c0, 1 },
	{ 0 },
};

static const struct adreno_a6xx_core adreno_gpu_core_a620 = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_A620, 6, 2, 0, ANY_ID),
		.features = ADRENO_CONTENT_PROTECTION | ADRENO_IOCOHERENT |
			ADRENO_IFPC | ADRENO_PREEMPTION | ADRENO_ACD |
			ADRENO_APRIV,
		.gpudev = &adreno_a630_gpudev.base,
		.perfcounters = &adreno_a6xx_perfcounters,
		.uche_gmem_alignment = 0,
		.gmem_size = SZ_512K,
		.bus_width = 32,
		.snapshot_size = 2 * SZ_1M,
	},
	.prim_fifo_threshold = 0x0010000,
	.gmu_major = 2,
	.gmu_minor = 0,
	.sqefw_name = "a650_sqe.fw",
	.gmufw_name = "a650_gmu.bin",
	.zap_name = "a620_zap",
	.hwcg = a620_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(a620_hwcg_regs),
	.vbif = a650_gbif_regs,
	.vbif_count = ARRAY_SIZE(a650_gbif_regs),
	.veto_fal10 = true,
	.hang_detect_cycles = 0x3ffff,
	.protected_regs = a620_protected_regs,
	.disable_tseskip = true,
	.highest_bank_bit = 14,
};

static const struct adreno_a6xx_core adreno_gpu_core_a621 = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_A621, 6, 2, 1, ANY_ID),
		.compatible = "qcom,adreno-gpu-a621",
		.features = ADRENO_CONTENT_PROTECTION | ADRENO_IOCOHERENT |
			ADRENO_APRIV | ADRENO_LSR | ADRENO_PREEMPTION |
			ADRENO_IFPC | ADRENO_ACD | ADRENO_BCL,
		.gpudev = &adreno_a6xx_hwsched_gpudev.base,
		.perfcounters = &adreno_a6xx_hwsched_perfcounters,
		.uche_gmem_alignment = 0,
		.gmem_size = SZ_512K,
		.bus_width = 32,
		.snapshot_size = 2 * SZ_1M,
	},
	.prim_fifo_threshold = 0x0010000,
	.gmu_major = 2,
	.gmu_minor = 0,
	.sqefw_name = "a650_sqe.fw",
	.gmufw_name = "a621_gmu.bin",
	.zap_name = "a620_zap",
	.hwcg = a620_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(a620_hwcg_regs),
	.vbif = a650_gbif_regs,
	.vbif_count = ARRAY_SIZE(a650_gbif_regs),
	.veto_fal10 = true,
	.pdc_in_aop = true,
	.hang_detect_cycles = 0x3ffff,
	.protected_regs = a620_protected_regs,
	.disable_tseskip = true,
	.highest_bank_bit = 13,
	.gmu_hub_clk_freq = 200000000,
};

static const struct kgsl_regmap_list a640_hwcg_regs[] = {
	{A6XX_RBBM_CLOCK_CNTL_SP0, 0x02222222},
	{A6XX_RBBM_CLOCK_CNTL2_SP0, 0x02222220},
	{A6XX_RBBM_CLOCK_DELAY_SP0, 0x00000080},
	{A6XX_RBBM_CLOCK_HYST_SP0, 0x0000F3CF},
	{A6XX_RBBM_CLOCK_CNTL_TP0, 0x02222222},
	{A6XX_RBBM_CLOCK_CNTL2_TP0, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL3_TP0, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL4_TP0, 0x00022222},
	{A6XX_RBBM_CLOCK_DELAY_TP0, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY2_TP0, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY3_TP0, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY4_TP0, 0x00011111},
	{A6XX_RBBM_CLOCK_HYST_TP0, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST2_TP0, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST3_TP0, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST4_TP0, 0x00077777},
	{A6XX_RBBM_CLOCK_CNTL_RB0, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL2_RB0, 0x01002222},
	{A6XX_RBBM_CLOCK_CNTL_CCU0, 0x00002220},
	{A6XX_RBBM_CLOCK_HYST_RB_CCU0, 0x00040F00},
	{A6XX_RBBM_CLOCK_CNTL_RAC, 0x05222022},
	{A6XX_RBBM_CLOCK_CNTL2_RAC, 0x00005555},
	{A6XX_RBBM_CLOCK_DELAY_RAC, 0x00000011},
	{A6XX_RBBM_CLOCK_HYST_RAC, 0x00445044},
	{A6XX_RBBM_CLOCK_CNTL_TSE_RAS_RBBM, 0x04222222},
	{A6XX_RBBM_CLOCK_MODE_VFD, 0x00002222},
	{A6XX_RBBM_CLOCK_MODE_GPC, 0x00222222},
	{A6XX_RBBM_CLOCK_DELAY_HLSQ_2, 0x00000002},
	{A6XX_RBBM_CLOCK_MODE_HLSQ, 0x00002222},
	{A6XX_RBBM_CLOCK_DELAY_TSE_RAS_RBBM, 0x00004000},
	{A6XX_RBBM_CLOCK_DELAY_VFD, 0x00002222},
	{A6XX_RBBM_CLOCK_DELAY_GPC, 0x00000200},
	{A6XX_RBBM_CLOCK_DELAY_HLSQ, 0x00000000},
	{A6XX_RBBM_CLOCK_HYST_TSE_RAS_RBBM, 0x00000000},
	{A6XX_RBBM_CLOCK_HYST_VFD, 0x00000000},
	{A6XX_RBBM_CLOCK_HYST_GPC, 0x04104004},
	{A6XX_RBBM_CLOCK_HYST_HLSQ, 0x00000000},
	{A6XX_RBBM_CLOCK_CNTL_TEX_FCHE, 0x00000222},
	{A6XX_RBBM_CLOCK_DELAY_TEX_FCHE, 0x00000111},
	{A6XX_RBBM_CLOCK_HYST_TEX_FCHE, 0x00000000},
	{A6XX_RBBM_CLOCK_CNTL_UCHE, 0x22222222},
	{A6XX_RBBM_CLOCK_HYST_UCHE, 0x00000004},
	{A6XX_RBBM_CLOCK_DELAY_UCHE, 0x00000002},
	{A6XX_RBBM_ISDB_CNT, 0x00000182},
	{A6XX_RBBM_RAC_THRESHOLD_CNT, 0x00000000},
	{A6XX_RBBM_SP_HYST_CNT, 0x00000000},
	{A6XX_RBBM_CLOCK_CNTL_GMU_GX, 0x00000222},
	{A6XX_RBBM_CLOCK_DELAY_GMU_GX, 0x00000111},
	{A6XX_RBBM_CLOCK_HYST_GMU_GX, 0x00000555},
};

/* These apply to a640, a680, a612 and a610 */
static const struct kgsl_regmap_list a640_vbif_regs[] = {
	{A6XX_GBIF_QSB_SIDE0, 0x00071620},
	{A6XX_GBIF_QSB_SIDE1, 0x00071620},
	{A6XX_GBIF_QSB_SIDE2, 0x00071620},
	{A6XX_GBIF_QSB_SIDE3, 0x00071620},
	{A6XX_RBBM_GBIF_CLIENT_QOS_CNTL, 0x3},
};

static const struct adreno_a6xx_core adreno_gpu_core_a640 = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_A640, 6, 4, 0, ANY_ID),
		.features = ADRENO_CONTENT_PROTECTION | ADRENO_IOCOHERENT |
			ADRENO_IFPC | ADRENO_PREEMPTION | ADRENO_L3_VOTE,
		.gpudev = &adreno_a6xx_gmu_gpudev.base,
		.perfcounters = &adreno_a6xx_legacy_perfcounters,
		.uche_gmem_alignment = SZ_1M,
		.gmem_size = SZ_1M, //Verified 1MB
		.bus_width = 32,
		.snapshot_size = 2 * SZ_1M,
	},
	.prim_fifo_threshold = 0x00200000,
	.gmu_major = 2,
	.gmu_minor = 0,
	.sqefw_name = "a630_sqe.fw",
	.gmufw_name = "a640_gmu.bin",
	.zap_name = "a640_zap",
	.hwcg = a640_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(a640_hwcg_regs),
	.vbif = a640_vbif_regs,
	.vbif_count = ARRAY_SIZE(a640_vbif_regs),
	.hang_detect_cycles = 0xcfffff,
	.protected_regs = a630_protected_regs,
	.disable_tseskip = true,
	.highest_bank_bit = 15,
};

static const struct kgsl_regmap_list a650_hwcg_regs[] = {
	{A6XX_RBBM_CLOCK_CNTL_SP0, 0x02222222},
	{A6XX_RBBM_CLOCK_CNTL2_SP0, 0x02222220},
	{A6XX_RBBM_CLOCK_DELAY_SP0, 0x00000080},
	{A6XX_RBBM_CLOCK_HYST_SP0, 0x0000F3CF},
	{A6XX_RBBM_CLOCK_CNTL_TP0, 0x02222222},
	{A6XX_RBBM_CLOCK_CNTL2_TP0, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL3_TP0, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL4_TP0, 0x00022222},
	{A6XX_RBBM_CLOCK_DELAY_TP0, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY2_TP0, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY3_TP0, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY4_TP0, 0x00011111},
	{A6XX_RBBM_CLOCK_HYST_TP0, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST2_TP0, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST3_TP0, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST4_TP0, 0x00077777},
	{A6XX_RBBM_CLOCK_CNTL_RB0, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL2_RB0, 0x01002222},
	{A6XX_RBBM_CLOCK_CNTL_CCU0, 0x00002220},
	{A6XX_RBBM_CLOCK_HYST_RB_CCU0, 0x00040F00},
	{A6XX_RBBM_CLOCK_CNTL_RAC, 0x25222022},
	{A6XX_RBBM_CLOCK_CNTL2_RAC, 0x00005555},
	{A6XX_RBBM_CLOCK_DELAY_RAC, 0x00000011},
	{A6XX_RBBM_CLOCK_HYST_RAC, 0x00445044},
	{A6XX_RBBM_CLOCK_CNTL_TSE_RAS_RBBM, 0x04222222},
	{A6XX_RBBM_CLOCK_MODE_VFD, 0x00002222},
	{A6XX_RBBM_CLOCK_MODE_GPC, 0x00222222},
	{A6XX_RBBM_CLOCK_DELAY_HLSQ_2, 0x00000002},
	{A6XX_RBBM_CLOCK_MODE_HLSQ, 0x00002222},
	{A6XX_RBBM_CLOCK_DELAY_TSE_RAS_RBBM, 0x00004000},
	{A6XX_RBBM_CLOCK_DELAY_VFD, 0x00002222},
	{A6XX_RBBM_CLOCK_DELAY_GPC, 0x00000200},
	{A6XX_RBBM_CLOCK_DELAY_HLSQ, 0x00000000},
	{A6XX_RBBM_CLOCK_HYST_TSE_RAS_RBBM, 0x00000000},
	{A6XX_RBBM_CLOCK_HYST_VFD, 0x00000000},
	{A6XX_RBBM_CLOCK_HYST_GPC, 0x04104004},
	{A6XX_RBBM_CLOCK_HYST_HLSQ, 0x00000000},
	{A6XX_RBBM_CLOCK_CNTL_TEX_FCHE, 0x00000222},
	{A6XX_RBBM_CLOCK_DELAY_TEX_FCHE, 0x00000111},
	{A6XX_RBBM_CLOCK_HYST_TEX_FCHE, 0x00000777},
	{A6XX_RBBM_CLOCK_CNTL_UCHE, 0x22222222},
	{A6XX_RBBM_CLOCK_HYST_UCHE, 0x00000004},
	{A6XX_RBBM_CLOCK_DELAY_UCHE, 0x00000002},
	{A6XX_RBBM_ISDB_CNT, 0x00000182},
	{A6XX_RBBM_RAC_THRESHOLD_CNT, 0x00000000},
	{A6XX_RBBM_SP_HYST_CNT, 0x00000000},
	{A6XX_RBBM_CLOCK_CNTL_GMU_GX, 0x00000222},
	{A6XX_RBBM_CLOCK_DELAY_GMU_GX, 0x00000111},
	{A6XX_RBBM_CLOCK_HYST_GMU_GX, 0x00000555},
};

static const struct adreno_a6xx_core adreno_gpu_core_a650 = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_A650, 6, 5, 0, 0),
		.features = ADRENO_IOCOHERENT | ADRENO_CONTENT_PROTECTION |
			ADRENO_IFPC | ADRENO_APRIV | ADRENO_L3_VOTE,
		.gpudev = &adreno_a6xx_gmu_gpudev.base,
		.perfcounters = &adreno_a6xx_perfcounters,
		.uche_gmem_alignment = 0,
		.gmem_size = SZ_1M + SZ_128K, /* verified 1152kB */
		.bus_width = 32,
		.snapshot_size = 2 * SZ_1M,
	},
	.prim_fifo_threshold = 0x00300000,
	.gmu_major = 2,
	.gmu_minor = 0,
	.sqefw_name = "a650_sqe.fw",
	.gmufw_name = "a650_gmu.bin",
	.zap_name = "a650_zap",
	.hwcg = a650_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(a650_hwcg_regs),
	.vbif = a650_gbif_regs,
	.vbif_count = ARRAY_SIZE(a650_gbif_regs),
	.veto_fal10 = true,
	.pdc_in_aop = true,
	.hang_detect_cycles = 0xcfffff,
	.protected_regs = a620_protected_regs,
	.disable_tseskip = true,
	.highest_bank_bit = 16,
};

static const struct adreno_a6xx_core adreno_gpu_core_a650v2 = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_A650, 6, 5, 0, ANY_ID),
		.features = ADRENO_IOCOHERENT | ADRENO_CONTENT_PROTECTION |
			ADRENO_IFPC | ADRENO_PREEMPTION | ADRENO_ACD |
			ADRENO_LM | ADRENO_APRIV | ADRENO_L3_VOTE,
		.gpudev = &adreno_a6xx_gmu_gpudev.base,
		.perfcounters = &adreno_a6xx_perfcounters,
		.uche_gmem_alignment = 0,
		.gmem_size = SZ_1M + SZ_128K, /* verified 1152kB */
		.bus_width = 32,
		.snapshot_size = 2 * SZ_1M,
	},
	.prim_fifo_threshold = 0x00300000,
	.gmu_major = 2,
	.gmu_minor = 0,
	.sqefw_name = "a650_sqe.fw",
	.gmufw_name = "a650_gmu.bin",
	.zap_name = "a650_zap",
	.hwcg = a650_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(a650_hwcg_regs),
	.vbif = a650_gbif_regs,
	.vbif_count = ARRAY_SIZE(a650_gbif_regs),
	.veto_fal10 = true,
	.pdc_in_aop = true,
	.hang_detect_cycles = 0x3ffff,
	.protected_regs = a620_protected_regs,
	.disable_tseskip = true,
	.highest_bank_bit = 16,
};

static const struct adreno_a6xx_core adreno_gpu_core_a680 = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_A680, 6, 8, 0, ANY_ID),
		.gpudev = &adreno_a6xx_gmu_gpudev.base,
		.perfcounters = &adreno_a6xx_legacy_perfcounters,
		.uche_gmem_alignment = SZ_1M,
		.gmem_size = SZ_2M,
		.bus_width = 32,
		.snapshot_size = SZ_1M,
	},
	.prim_fifo_threshold = 0x00400000,
	.gmu_major = 2,
	.gmu_minor = 0,
	.sqefw_name = "a630_sqe.fw",
	.gmufw_name = "a640_gmu.bin",
	.zap_name = "a640_zap",
	.hwcg = a640_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(a640_hwcg_regs),
	.vbif = a640_vbif_regs,
	.vbif_count = ARRAY_SIZE(a640_vbif_regs),
	.hang_detect_cycles = 0xcfffff,
	.protected_regs = a630_protected_regs,
	.disable_tseskip = true,
	.highest_bank_bit = 16,
};

static const struct kgsl_regmap_list a612_hwcg_regs[] = {
	{A6XX_RBBM_CLOCK_CNTL_SP0, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL2_SP0, 0x02222220},
	{A6XX_RBBM_CLOCK_DELAY_SP0, 0x00000081},
	{A6XX_RBBM_CLOCK_HYST_SP0, 0x0000F3CF},
	{A6XX_RBBM_CLOCK_CNTL_TP0, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL2_TP0, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL3_TP0, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL4_TP0, 0x00022222},
	{A6XX_RBBM_CLOCK_DELAY_TP0, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY2_TP0, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY3_TP0, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY4_TP0, 0x00011111},
	{A6XX_RBBM_CLOCK_HYST_TP0, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST2_TP0, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST3_TP0, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST4_TP0, 0x00077777},
	{A6XX_RBBM_CLOCK_CNTL_RB0, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL2_RB0, 0x01202222},
	{A6XX_RBBM_CLOCK_CNTL_CCU0, 0x00002220},
	{A6XX_RBBM_CLOCK_HYST_RB_CCU0, 0x00040F00},
	{A6XX_RBBM_CLOCK_CNTL_RAC, 0x05522022},
	{A6XX_RBBM_CLOCK_CNTL2_RAC, 0x00005555},
	{A6XX_RBBM_CLOCK_DELAY_RAC, 0x00000011},
	{A6XX_RBBM_CLOCK_HYST_RAC, 0x00445044},
	{A6XX_RBBM_CLOCK_CNTL_TSE_RAS_RBBM, 0x04222222},
	{A6XX_RBBM_CLOCK_MODE_VFD, 0x00002222},
	{A6XX_RBBM_CLOCK_MODE_GPC, 0x02222222},
	{A6XX_RBBM_CLOCK_DELAY_HLSQ_2, 0x00000002},
	{A6XX_RBBM_CLOCK_MODE_HLSQ, 0x00002222},
	{A6XX_RBBM_CLOCK_DELAY_TSE_RAS_RBBM, 0x00004000},
	{A6XX_RBBM_CLOCK_DELAY_VFD, 0x00002222},
	{A6XX_RBBM_CLOCK_DELAY_GPC, 0x00000200},
	{A6XX_RBBM_CLOCK_DELAY_HLSQ, 0x00000000},
	{A6XX_RBBM_CLOCK_HYST_TSE_RAS_RBBM, 0x00000000},
	{A6XX_RBBM_CLOCK_HYST_VFD, 0x00000000},
	{A6XX_RBBM_CLOCK_HYST_GPC, 0x04104004},
	{A6XX_RBBM_CLOCK_HYST_HLSQ, 0x00000000},
	{A6XX_RBBM_CLOCK_CNTL_UCHE, 0x22222222},
	{A6XX_RBBM_CLOCK_HYST_UCHE, 0x00000004},
	{A6XX_RBBM_CLOCK_DELAY_UCHE, 0x00000002},
	{A6XX_RBBM_ISDB_CNT, 0x00000182},
	{A6XX_RBBM_RAC_THRESHOLD_CNT, 0x00000000},
	{A6XX_RBBM_SP_HYST_CNT, 0x00000000},
	{A6XX_RBBM_CLOCK_CNTL_GMU_GX, 0x00000222},
	{A6XX_RBBM_CLOCK_DELAY_GMU_GX, 0x00000111},
	{A6XX_RBBM_CLOCK_HYST_GMU_GX, 0x00000555},
};

static const struct adreno_a6xx_core adreno_gpu_core_a612 = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_A612, 6, 1, 2, ANY_ID),
		.features = ADRENO_CONTENT_PROTECTION |
			ADRENO_IOCOHERENT | ADRENO_PREEMPTION | ADRENO_IFPC,
		.gpudev = &adreno_a6xx_rgmu_gpudev,
		.perfcounters = &adreno_a6xx_legacy_perfcounters,
		.uche_gmem_alignment = SZ_1M,
		.gmem_size = (SZ_128K + SZ_4K),
		.bus_width = 32,
		.snapshot_size = SZ_1M,
	},
	.prim_fifo_threshold = 0x00080000,
	.sqefw_name = "a630_sqe.fw",
	.gmufw_name = "a612_rgmu.bin",
	.zap_name = "a612_zap",
	.hwcg = a612_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(a612_hwcg_regs),
	.vbif = a640_vbif_regs,
	.vbif_count = ARRAY_SIZE(a640_vbif_regs),
	.hang_detect_cycles = 0x3fffff,
	.protected_regs = a630_protected_regs,
	.highest_bank_bit = 14,
};

static const struct adreno_a6xx_core adreno_gpu_core_a616 = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_A616, 6, 1, 6, ANY_ID),
		.features = ADRENO_PREEMPTION |
			ADRENO_CONTENT_PROTECTION | ADRENO_IFPC |
			ADRENO_IOCOHERENT,
		.gpudev = &adreno_a630_gpudev.base,
		.perfcounters = &adreno_a6xx_legacy_perfcounters,
		.uche_gmem_alignment = SZ_1M,
		.gmem_size = SZ_512K,
		.bus_width = 32,
		.snapshot_size = SZ_1M,
	},
	.prim_fifo_threshold = 0x0018000,
	.gmu_major = 1,
	.gmu_minor = 3,
	.sqefw_name = "a630_sqe.fw",
	.gmufw_name = "a630_gmu.bin",
	.zap_name = "a615_zap",
	.hwcg = a615_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(a615_hwcg_regs),
	.vbif = a615_gbif_regs,
	.vbif_count = ARRAY_SIZE(a615_gbif_regs),
	.hang_detect_cycles = 0xcfffff,
	.protected_regs = a630_protected_regs,
	.highest_bank_bit = 14,
};

static const struct adreno_a6xx_core adreno_gpu_core_a610 = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_A610, 6, 1, 0, ANY_ID),
		.features = ADRENO_CONTENT_PROTECTION |
			ADRENO_PREEMPTION,
		.gpudev = &adreno_a6xx_gpudev,
		.perfcounters = &adreno_a6xx_legacy_perfcounters,
		.uche_gmem_alignment = SZ_1M,
		.gmem_size = (SZ_128K + SZ_4K),
		.bus_width = 32,
	},
	.prim_fifo_threshold = 0x00080000,
	.sqefw_name = "a630_sqe.fw",
	.zap_name = "a610_zap",
	.hwcg = a612_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(a612_hwcg_regs),
	.vbif = a640_vbif_regs,
	.vbif_count = ARRAY_SIZE(a640_vbif_regs),
	.hang_detect_cycles = 0x3ffff,
	.protected_regs = a630_protected_regs,
	.highest_bank_bit = 14,
};

static const struct kgsl_regmap_list a660_hwcg_regs[] = {
	{A6XX_RBBM_CLOCK_CNTL_SP0, 0x02222222},
	{A6XX_RBBM_CLOCK_CNTL2_SP0, 0x02222220},
	{A6XX_RBBM_CLOCK_DELAY_SP0, 0x00000080},
	{A6XX_RBBM_CLOCK_HYST_SP0, 0x0000F3CF},
	{A6XX_RBBM_CLOCK_CNTL_TP0, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL2_TP0, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL3_TP0, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL4_TP0, 0x00022222},
	{A6XX_RBBM_CLOCK_DELAY_TP0, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY2_TP0, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY3_TP0, 0x11111111},
	{A6XX_RBBM_CLOCK_DELAY4_TP0, 0x00011111},
	{A6XX_RBBM_CLOCK_HYST_TP0, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST2_TP0, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST3_TP0, 0x77777777},
	{A6XX_RBBM_CLOCK_HYST4_TP0, 0x00077777},
	{A6XX_RBBM_CLOCK_CNTL_RB0, 0x22222222},
	{A6XX_RBBM_CLOCK_CNTL2_RB0, 0x01002222},
	{A6XX_RBBM_CLOCK_CNTL_CCU0, 0x00002220},
	{A6XX_RBBM_CLOCK_HYST_RB_CCU0, 0x00040F00},
	{A6XX_RBBM_CLOCK_CNTL_RAC, 0x25222022},
	{A6XX_RBBM_CLOCK_CNTL2_RAC, 0x00005555},
	{A6XX_RBBM_CLOCK_DELAY_RAC, 0x00000011},
	{A6XX_RBBM_CLOCK_HYST_RAC, 0x00445044},
	{A6XX_RBBM_CLOCK_CNTL_TSE_RAS_RBBM, 0x04222222},
	{A6XX_RBBM_CLOCK_MODE_VFD, 0x00002222},
	{A6XX_RBBM_CLOCK_MODE_GPC, 0x00222222},
	{A6XX_RBBM_CLOCK_DELAY_HLSQ_2, 0x00000002},
	{A6XX_RBBM_CLOCK_MODE_HLSQ, 0x00002222},
	{A6XX_RBBM_CLOCK_DELAY_TSE_RAS_RBBM, 0x00004000},
	{A6XX_RBBM_CLOCK_DELAY_VFD, 0x00002222},
	{A6XX_RBBM_CLOCK_DELAY_GPC, 0x00000200},
	{A6XX_RBBM_CLOCK_DELAY_HLSQ, 0x00000000},
	{A6XX_RBBM_CLOCK_HYST_TSE_RAS_RBBM, 0x00000000},
	{A6XX_RBBM_CLOCK_HYST_VFD, 0x00000000},
	{A6XX_RBBM_CLOCK_HYST_GPC, 0x04104004},
	{A6XX_RBBM_CLOCK_HYST_HLSQ, 0x00000000},
	{A6XX_RBBM_CLOCK_CNTL_TEX_FCHE, 0x00000222},
	{A6XX_RBBM_CLOCK_DELAY_TEX_FCHE, 0x00000111},
	{A6XX_RBBM_CLOCK_HYST_TEX_FCHE, 0x00000000},
	{A6XX_RBBM_CLOCK_CNTL_UCHE, 0x22222222},
	{A6XX_RBBM_CLOCK_HYST_UCHE, 0x00000004},
	{A6XX_RBBM_CLOCK_DELAY_UCHE, 0x00000002},
	{A6XX_RBBM_ISDB_CNT, 0x00000182},
	{A6XX_RBBM_RAC_THRESHOLD_CNT, 0x00000000},
	{A6XX_RBBM_SP_HYST_CNT, 0x00000000},
	{A6XX_RBBM_CLOCK_CNTL_GMU_GX, 0x00000222},
	{A6XX_RBBM_CLOCK_DELAY_GMU_GX, 0x00000111},
	{A6XX_RBBM_CLOCK_HYST_GMU_GX, 0x00000555},
};

/* A660 protected register list */
static const struct adreno_protected_regs a660_protected_regs[] = {
	{ A6XX_CP_PROTECT_REG + 0, 0x00000, 0x004ff, 0 },
	{ A6XX_CP_PROTECT_REG + 1, 0x00501, 0x00506, 0 },
	{ A6XX_CP_PROTECT_REG + 2, 0x0050b, 0x007ff, 0 },
	{ A6XX_CP_PROTECT_REG + 3, 0x0050e, 0x0050e, 1 },
	{ A6XX_CP_PROTECT_REG + 4, 0x00510, 0x00510, 1 },
	{ A6XX_CP_PROTECT_REG + 5, 0x00534, 0x00534, 1 },
	{ A6XX_CP_PROTECT_REG + 6, 0x00800, 0x00882, 1 },
	{ A6XX_CP_PROTECT_REG + 7, 0x008a0, 0x008a8, 1 },
	{ A6XX_CP_PROTECT_REG + 8, 0x008ab, 0x008cf, 1 },
	{ A6XX_CP_PROTECT_REG + 9, 0x008d0, 0x0098c, 0 },
	{ A6XX_CP_PROTECT_REG + 10, 0x00900, 0x0094d, 1 },
	{ A6XX_CP_PROTECT_REG + 11, 0x0098d, 0x00bff, 1 },
	{ A6XX_CP_PROTECT_REG + 12, 0x00e00, 0x00e01, 1 },
	{ A6XX_CP_PROTECT_REG + 13, 0x00e03, 0x00e0f, 1 },
	{ A6XX_CP_PROTECT_REG + 14, 0x03c00, 0x03cc3, 1 },
	{ A6XX_CP_PROTECT_REG + 15, 0x03cc4, 0x05cc3, 0 },
	{ A6XX_CP_PROTECT_REG + 16, 0x08630, 0x087ff, 1 },
	{ A6XX_CP_PROTECT_REG + 17, 0x08e00, 0x08e00, 1 },
	{ A6XX_CP_PROTECT_REG + 18, 0x08e08, 0x08e08, 1 },
	{ A6XX_CP_PROTECT_REG + 19, 0x08e50, 0x08e6f, 1 },
	{ A6XX_CP_PROTECT_REG + 20, 0x08e80, 0x090ff, 1 },
	{ A6XX_CP_PROTECT_REG + 21, 0x09624, 0x097ff, 1 },
	{ A6XX_CP_PROTECT_REG + 22, 0x09e60, 0x09e71, 1 },
	{ A6XX_CP_PROTECT_REG + 23, 0x09e78, 0x09fff, 1 },
	{ A6XX_CP_PROTECT_REG + 24, 0x0a630, 0x0a7ff, 1 },
	{ A6XX_CP_PROTECT_REG + 25, 0x0ae02, 0x0ae02, 1 },
	{ A6XX_CP_PROTECT_REG + 26, 0x0ae50, 0x0af7f, 1 },
	{ A6XX_CP_PROTECT_REG + 27, 0x0b604, 0x0b604, 1 },
	{ A6XX_CP_PROTECT_REG + 28, 0x0b608, 0x0b60e, 1 },
	{ A6XX_CP_PROTECT_REG + 29, 0x0be02, 0x0be03, 1 },
	{ A6XX_CP_PROTECT_REG + 30, 0x0be20, 0x0bf7f, 1 },
	{ A6XX_CP_PROTECT_REG + 31, 0x0d000, 0x0d5ff, 1 },
	{ A6XX_CP_PROTECT_REG + 32, 0x0f000, 0x0fbff, 1 },
	{ A6XX_CP_PROTECT_REG + 33, 0x0fc00, 0x11bff, 0 },
	{ A6XX_CP_PROTECT_REG + 34, 0x18400, 0x1a3ff, 1 },
	{ A6XX_CP_PROTECT_REG + 35, 0x1a400, 0x1c3ff, 1 },
	{ A6XX_CP_PROTECT_REG + 36, 0x1c400, 0x1e3ff, 1 },
	{ A6XX_CP_PROTECT_REG + 37, 0x1f400, 0x1f843, 1 },
	{ A6XX_CP_PROTECT_REG + 38, 0x1f844, 0x1f8bf, 0 },
	{ A6XX_CP_PROTECT_REG + 39, 0x1f860, 0x1f860, 1 },
	{ A6XX_CP_PROTECT_REG + 40, 0x1f887, 0x1f8a2, 1 },
	{ A6XX_CP_PROTECT_REG + 47, 0x1f8c0, 0x1f8c0, 1 },
	{ 0 },
};

static const struct adreno_a6xx_core adreno_gpu_core_a660 = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_A660, 6, 6, 0, 0),
		.features = ADRENO_APRIV |
				ADRENO_IOCOHERENT | ADRENO_CONTENT_PROTECTION |
				ADRENO_IFPC | ADRENO_PREEMPTION | ADRENO_L3_VOTE,
		.gpudev = &adreno_a6xx_gmu_gpudev.base,
		.perfcounters = &adreno_a6xx_perfcounters,
		.uche_gmem_alignment = 0,
		.gmem_size = SZ_1M + SZ_512K,
		.bus_width = 32,
		.snapshot_size = SZ_2M,
	},
	.prim_fifo_threshold = 0x00300000,
	.gmu_major = 2,
	.gmu_minor = 0,
	.sqefw_name = "a660_sqe.fw",
	.gmufw_name = "a660_gmu.bin",
	.zap_name = "a660_zap",
	.hwcg = a660_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(a660_hwcg_regs),
	.vbif = a650_gbif_regs,
	.vbif_count = ARRAY_SIZE(a650_gbif_regs),
	.hang_detect_cycles = 0xcfffff,
	.veto_fal10 = true,
	.protected_regs = a660_protected_regs,
	.disable_tseskip = true,
	.highest_bank_bit = 16,
	.pdc_in_aop = true,
	.ctxt_record_size = 2496 * 1024,
};

static const struct adreno_a6xx_core adreno_gpu_core_a660v2 = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_A660, 6, 6, 0, ANY_ID),
		.features = ADRENO_APRIV |
				ADRENO_IOCOHERENT | ADRENO_CONTENT_PROTECTION |
				ADRENO_IFPC | ADRENO_PREEMPTION | ADRENO_ACD |
				ADRENO_L3_VOTE,
		.gpudev = &adreno_a6xx_gmu_gpudev.base,
		.perfcounters = &adreno_a6xx_perfcounters,
		.uche_gmem_alignment = 0,
		.gmem_size = SZ_1M + SZ_512K,
		.bus_width = 32,
		.snapshot_size = SZ_2M,
	},
	.prim_fifo_threshold = 0x00300000,
	.gmu_major = 2,
	.gmu_minor = 0,
	.sqefw_name = "a660_sqe.fw",
	.gmufw_name = "a660_gmu.bin",
	.zap_name = "a660_zap",
	.hwcg = a660_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(a660_hwcg_regs),
	.vbif = a650_gbif_regs,
	.vbif_count = ARRAY_SIZE(a650_gbif_regs),
	.hang_detect_cycles = 0xcfffff,
	.veto_fal10 = true,
	.protected_regs = a660_protected_regs,
	.disable_tseskip = true,
	.highest_bank_bit = 16,
	.pdc_in_aop = true,
	.ctxt_record_size = 2496 * 1024,
};

static const struct adreno_a6xx_core adreno_gpu_core_a660_shima = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_A660, 6, 6, 0, ANY_ID),
		.compatible = "qcom,adreno-gpu-a660-shima",
		.features = ADRENO_APRIV |
				ADRENO_IOCOHERENT | ADRENO_CONTENT_PROTECTION |
				ADRENO_IFPC | ADRENO_PREEMPTION | ADRENO_ACD,
		.gpudev = &adreno_a6xx_gmu_gpudev.base,
		.perfcounters = &adreno_a6xx_perfcounters,
		.uche_gmem_alignment = 0,
		.gmem_size = SZ_1M + SZ_512K,
		.bus_width = 32,
		.snapshot_size = SZ_2M,
	},
	.prim_fifo_threshold = 0x00300000,
	.gmu_major = 2,
	.gmu_minor = 0,
	.sqefw_name = "a660_sqe.fw",
	.gmufw_name = "a660_gmu.bin",
	.zap_name = "a660_zap",
	.hwcg = a660_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(a660_hwcg_regs),
	.vbif = a650_gbif_regs,
	.vbif_count = ARRAY_SIZE(a650_gbif_regs),
	.hang_detect_cycles = 0x3ffff,
	.veto_fal10 = true,
	.protected_regs = a660_protected_regs,
	.disable_tseskip = true,
	.highest_bank_bit = 15,
	.pdc_in_aop = true,
	.ctxt_record_size = 2496 * 1024,
};

static const struct adreno_a6xx_core adreno_gpu_core_a635 = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_A635, 6, 3, 5, ANY_ID),
		.features = ADRENO_APRIV | ADRENO_IOCOHERENT |
				ADRENO_CONTENT_PROTECTION,
		.gpudev = &adreno_a6xx_gmu_gpudev.base,
		.perfcounters = &adreno_a6xx_perfcounters,
		.uche_gmem_alignment = 0,
		.gmem_size = SZ_512K,
		.bus_width = 32,
		.snapshot_size = SZ_2M,
	},
	.prim_fifo_threshold = 0x00200000,
	.gmu_major = 2,
	.gmu_minor = 0,
	.sqefw_name = "a660_sqe.fw",
	.gmufw_name = "a660_gmu.bin",
	.zap_name = "a660_zap",
	.hwcg = a660_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(a660_hwcg_regs),
	.vbif = a650_gbif_regs,
	.vbif_count = ARRAY_SIZE(a650_gbif_regs),
	.hang_detect_cycles = 0x3ffff,
	.veto_fal10 = true,
	.protected_regs = a660_protected_regs,
	.disable_tseskip = true,
	.highest_bank_bit = 15,
	.pdc_in_aop = true,
	.ctxt_record_size = 2496 * 1024,
};

static const struct adreno_a6xx_core adreno_gpu_core_a662 = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_A662, ANY_ID, ANY_ID, ANY_ID, ANY_ID),
		.compatible = "qcom,adreno-gpu-a662",
		.features = ADRENO_APRIV | ADRENO_IOCOHERENT |
			ADRENO_CONTENT_PROTECTION | ADRENO_PREEMPTION |
			ADRENO_IFPC | ADRENO_BCL | ADRENO_ACD,
		.gpudev = &adreno_a6xx_gmu_gpudev.base,
		.perfcounters = &adreno_a6xx_perfcounters,
		.uche_gmem_alignment = 0,
		.gmem_size = SZ_1M + SZ_512K,
		.bus_width = 32,
		.snapshot_size = SZ_2M,
	},
	.prim_fifo_threshold = 0x00300000,
	.gmu_major = 2,
	.gmu_minor = 0,
	.sqefw_name = "a660_sqe.fw",
	.gmufw_name = "a662_gmu.bin",
	.zap_name = "a662_zap",
	.hwcg = a660_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(a660_hwcg_regs),
	.vbif = a650_gbif_regs,
	.vbif_count = ARRAY_SIZE(a650_gbif_regs),
	.hang_detect_cycles = 0x3ffff,
	.veto_fal10 = true,
	.protected_regs = a660_protected_regs,
	.disable_tseskip = true,
	.highest_bank_bit = 15,
	.pdc_in_aop = true,
	.ctxt_record_size = 2496 * 1024,
};

static const struct adreno_a6xx_core adreno_gpu_core_gen6_3_26_0 = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_GEN6_3_26_0, ANY_ID, ANY_ID, ANY_ID, ANY_ID),
		.compatible = "qcom,adreno-gpu-gen6-3-26-0",
		.features = ADRENO_CONTENT_PROTECTION | ADRENO_IOCOHERENT |
			ADRENO_PREEMPTION,
		.gpudev = &adreno_a6xx_gpudev,
		.perfcounters = &adreno_a6xx_legacy_perfcounters,
		.uche_gmem_alignment = SZ_1M,
		.gmem_size = (SZ_128K + SZ_4K),
		.bus_width = 32,
		.snapshot_size = SZ_2M,
	},
	.prim_fifo_threshold = 0x00080000,
	.sqefw_name = "a630_sqe.fw",
	.zap_name = "gen6_3_26_0_zap",
	.hwcg = a612_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(a612_hwcg_regs),
	.vbif = a640_vbif_regs,
	.vbif_count = ARRAY_SIZE(a640_vbif_regs),
	.hang_detect_cycles = 0x3fffff,
	.protected_regs = a630_protected_regs,
	.highest_bank_bit = 15,
};

extern const struct gen7_snapshot_block_list gen7_0_0_snapshot_block_list;
extern const struct gen7_snapshot_block_list gen7_3_0_snapshot_block_list;

static const struct kgsl_regmap_list gen7_0_0_gbif_regs[] = {
	{ GEN7_GBIF_QSB_SIDE0, 0x00071620 },
	{ GEN7_GBIF_QSB_SIDE1, 0x00071620 },
	{ GEN7_GBIF_QSB_SIDE2, 0x00071620 },
	{ GEN7_GBIF_QSB_SIDE3, 0x00071620 },
	{ GEN7_RBBM_GBIF_CLIENT_QOS_CNTL, 0x2120212 },
};

static const struct kgsl_regmap_list gen7_3_0_gbif_regs[] = {
	{ GEN7_GBIF_QSB_SIDE0, 0x00071620 },
	{ GEN7_GBIF_QSB_SIDE1, 0x00071620 },
	{ GEN7_GBIF_QSB_SIDE2, 0x00071620 },
	{ GEN7_GBIF_QSB_SIDE3, 0x00071620 },
	{ GEN7_RBBM_GBIF_CLIENT_QOS_CNTL, 0x00000003 },
};

static const u32 gen7_6_0_gbif_client_qos_values[KGSL_PRIORITY_MAX_RB_LEVELS] = {
	0x03230323,
};

static const struct kgsl_regmap_list gen7_0_0_hwcg_regs[] = {
	{ GEN7_RBBM_CLOCK_CNTL_SP0, 0x02222222 },
	{ GEN7_RBBM_CLOCK_CNTL2_SP0, 0x02022222 },
	{ GEN7_RBBM_CLOCK_HYST_SP0, 0x0000f3cf },
	{ GEN7_RBBM_CLOCK_DELAY_SP0, 0x00000080 },
	{ GEN7_RBBM_CLOCK_CNTL_TP0, 0x22222220 },
	{ GEN7_RBBM_CLOCK_CNTL2_TP0, 0x22222222 },
	{ GEN7_RBBM_CLOCK_CNTL3_TP0, 0x22222222 },
	{ GEN7_RBBM_CLOCK_CNTL4_TP0, 0x00222222 },
	{ GEN7_RBBM_CLOCK_HYST_TP0, 0x77777777 },
	{ GEN7_RBBM_CLOCK_HYST2_TP0, 0x77777777 },
	{ GEN7_RBBM_CLOCK_HYST3_TP0, 0x77777777 },
	{ GEN7_RBBM_CLOCK_HYST4_TP0, 0x00077777 },
	{ GEN7_RBBM_CLOCK_DELAY_TP0, 0x11111111 },
	{ GEN7_RBBM_CLOCK_DELAY2_TP0, 0x11111111 },
	{ GEN7_RBBM_CLOCK_DELAY3_TP0, 0x11111111 },
	{ GEN7_RBBM_CLOCK_DELAY4_TP0, 0x00011111 },
	{ GEN7_RBBM_CLOCK_CNTL_UCHE, 0x22222222 },
	{ GEN7_RBBM_CLOCK_HYST_UCHE, 0x00000004 },
	{ GEN7_RBBM_CLOCK_DELAY_UCHE, 0x00000002 },
	{ GEN7_RBBM_CLOCK_CNTL_RB0, 0x22222222 },
	{ GEN7_RBBM_CLOCK_CNTL2_RB0, 0x01002222 },
	{ GEN7_RBBM_CLOCK_CNTL_CCU0, 0x00002220 },
	{ GEN7_RBBM_CLOCK_HYST_RB_CCU0, 0x44000f00 },
	{ GEN7_RBBM_CLOCK_CNTL_RAC, 0x25222022 },
	{ GEN7_RBBM_CLOCK_CNTL2_RAC, 0x00555555 },
	{ GEN7_RBBM_CLOCK_DELAY_RAC, 0x00000011 },
	{ GEN7_RBBM_CLOCK_HYST_RAC, 0x00440044 },
	{ GEN7_RBBM_CLOCK_CNTL_TSE_RAS_RBBM, 0x04222222 },
	{ GEN7_RBBM_CLOCK_MODE2_GRAS, 0x00000222 },
	{ GEN7_RBBM_CLOCK_MODE_BV_GRAS, 0x00222222 },
	{ GEN7_RBBM_CLOCK_MODE_GPC, 0x02222223 },
	{ GEN7_RBBM_CLOCK_MODE_VFD, 0x00002222 },
	{ GEN7_RBBM_CLOCK_MODE_BV_GPC, 0x00222222 },
	{ GEN7_RBBM_CLOCK_MODE_BV_VFD, 0x00002222 },
	{ GEN7_RBBM_CLOCK_HYST_TSE_RAS_RBBM, 0x00000000 },
	{ GEN7_RBBM_CLOCK_HYST_GPC, 0x04104004 },
	{ GEN7_RBBM_CLOCK_HYST_VFD, 0x00000000 },
	{ GEN7_RBBM_CLOCK_DELAY_TSE_RAS_RBBM, 0x00004000 },
	{ GEN7_RBBM_CLOCK_DELAY_GPC, 0x00000200 },
	{ GEN7_RBBM_CLOCK_DELAY_VFD, 0x00002222 },
	{ GEN7_RBBM_CLOCK_MODE_HLSQ, 0x00002222 },
	{ GEN7_RBBM_CLOCK_DELAY_HLSQ, 0x00000000 },
	{ GEN7_RBBM_CLOCK_HYST_HLSQ, 0x00000000 },
	{ GEN7_RBBM_CLOCK_DELAY_HLSQ_2, 0x00000002 },
	{ GEN7_RBBM_CLOCK_MODE_BV_LRZ, 0x55555552 },
	{ GEN7_RBBM_CLOCK_MODE_CP, 0x00000223 },
	{ GEN7_RBBM_CLOCK_CNTL, 0x8aa8aa82 },
	{ GEN7_RBBM_ISDB_CNT, 0x00000182 },
	{ GEN7_RBBM_RAC_THRESHOLD_CNT, 0x00000000 },
	{ GEN7_RBBM_SP_HYST_CNT, 0x00000000 },
	{ GEN7_RBBM_CLOCK_CNTL_GMU_GX, 0x00000222 },
	{ GEN7_RBBM_CLOCK_DELAY_GMU_GX, 0x00000111 },
	{ GEN7_RBBM_CLOCK_HYST_GMU_GX, 0x00000555 },
};

static const struct kgsl_regmap_list gen7_3_0_hwcg_regs[] = {
	{ GEN7_RBBM_CLOCK_CNTL_SP0, 0x02222222 },
	{ GEN7_RBBM_CLOCK_CNTL2_SP0, 0x02022222 },
	{ GEN7_RBBM_CLOCK_HYST_SP0, 0x0000f3cf },
	{ GEN7_RBBM_CLOCK_DELAY_SP0, 0x00000080 },
	{ GEN7_RBBM_CLOCK_CNTL_TP0, 0x22222220 },
	{ GEN7_RBBM_CLOCK_CNTL2_TP0, 0x22222222 },
	{ GEN7_RBBM_CLOCK_CNTL3_TP0, 0x22222222 },
	{ GEN7_RBBM_CLOCK_CNTL4_TP0, 0x00222222 },
	{ GEN7_RBBM_CLOCK_HYST_TP0, 0x77777777 },
	{ GEN7_RBBM_CLOCK_HYST2_TP0, 0x77777777 },
	{ GEN7_RBBM_CLOCK_HYST3_TP0, 0x77777777 },
	{ GEN7_RBBM_CLOCK_HYST4_TP0, 0x00077777 },
	{ GEN7_RBBM_CLOCK_DELAY_TP0, 0x11111111 },
	{ GEN7_RBBM_CLOCK_DELAY2_TP0, 0x11111111 },
	{ GEN7_RBBM_CLOCK_DELAY3_TP0, 0x11111111 },
	{ GEN7_RBBM_CLOCK_DELAY4_TP0, 0x00011111 },
	{ GEN7_RBBM_CLOCK_CNTL_UCHE, 0x22222222 },
	{ GEN7_RBBM_CLOCK_HYST_UCHE, 0x00000004 },
	{ GEN7_RBBM_CLOCK_DELAY_UCHE, 0x00000002 },
	{ GEN7_RBBM_CLOCK_CNTL_RB0, 0x22222222 },
	{ GEN7_RBBM_CLOCK_CNTL2_RB0, 0x01002222 },
	{ GEN7_RBBM_CLOCK_CNTL_CCU0, 0x00002220 },
	{ GEN7_RBBM_CLOCK_HYST_RB_CCU0, 0x44000f00 },
	{ GEN7_RBBM_CLOCK_CNTL_RAC, 0x25222022 },
	{ GEN7_RBBM_CLOCK_CNTL2_RAC, 0x00555555 },
	{ GEN7_RBBM_CLOCK_DELAY_RAC, 0x00000011 },
	{ GEN7_RBBM_CLOCK_HYST_RAC, 0x00440044 },
	{ GEN7_RBBM_CLOCK_CNTL_TSE_RAS_RBBM, 0x04222222 },
	{ GEN7_RBBM_CLOCK_MODE2_GRAS, 0x00000222 },
	{ GEN7_RBBM_CLOCK_MODE_GPC, 0x02222223 },
	{ GEN7_RBBM_CLOCK_MODE_VFD, 0x00002222 },
	{ GEN7_RBBM_CLOCK_HYST_TSE_RAS_RBBM, 0x00000000 },
	{ GEN7_RBBM_CLOCK_HYST_GPC, 0x04104004 },
	{ GEN7_RBBM_CLOCK_HYST_VFD, 0x00000000 },
	{ GEN7_RBBM_CLOCK_DELAY_TSE_RAS_RBBM, 0x00004000 },
	{ GEN7_RBBM_CLOCK_DELAY_GPC, 0x00000200 },
	{ GEN7_RBBM_CLOCK_DELAY_VFD, 0x00002222 },
	{ GEN7_RBBM_CLOCK_MODE_HLSQ, 0x00002222 },
	{ GEN7_RBBM_CLOCK_DELAY_HLSQ, 0x00000000 },
	{ GEN7_RBBM_CLOCK_HYST_HLSQ, 0x00000000 },
	{ GEN7_RBBM_CLOCK_DELAY_HLSQ_2, 0x00000002 },
	{ GEN7_RBBM_CLOCK_MODE_CP, 0x00000223 },
	{ GEN7_RBBM_CLOCK_CNTL, 0x8aa8aa82 },
	{ GEN7_RBBM_ISDB_CNT, 0x00000182 },
	{ GEN7_RBBM_RAC_THRESHOLD_CNT, 0x00000000 },
	{ GEN7_RBBM_SP_HYST_CNT, 0x00000000 },
	{ GEN7_RBBM_CLOCK_CNTL_GMU_GX, 0x00000222 },
	{ GEN7_RBBM_CLOCK_DELAY_GMU_GX, 0x00000111 },
	{ GEN7_RBBM_CLOCK_HYST_GMU_GX, 0x00000555 },
};

extern const struct gen7_snapshot_block_list gen7_6_0_snapshot_block_list;

static const struct kgsl_regmap_list gen7_6_0_hwcg_regs[] = {
	{ GEN7_RBBM_CLOCK_CNTL_SP0, 0x02222222 },
	{ GEN7_RBBM_CLOCK_CNTL2_SP0, 0x22022222 },
	{ GEN7_RBBM_CLOCK_HYST_SP0, 0x003cf3cf },
	{ GEN7_RBBM_CLOCK_DELAY_SP0, 0x00000080 },
	{ GEN7_RBBM_CLOCK_CNTL_TP0, 0x22222220 },
	{ GEN7_RBBM_CLOCK_CNTL2_TP0, 0x22222222 },
	{ GEN7_RBBM_CLOCK_CNTL3_TP0, 0x22222222 },
	{ GEN7_RBBM_CLOCK_CNTL4_TP0, 0x00222222 },
	{ GEN7_RBBM_CLOCK_HYST_TP0, 0x77777777 },
	{ GEN7_RBBM_CLOCK_HYST2_TP0, 0x77777777 },
	{ GEN7_RBBM_CLOCK_HYST3_TP0, 0x77777777 },
	{ GEN7_RBBM_CLOCK_HYST4_TP0, 0x00077777 },
	{ GEN7_RBBM_CLOCK_DELAY_TP0, 0x11111111 },
	{ GEN7_RBBM_CLOCK_DELAY2_TP0, 0x11111111 },
	{ GEN7_RBBM_CLOCK_DELAY3_TP0, 0x11111111 },
	{ GEN7_RBBM_CLOCK_DELAY4_TP0, 0x00011111 },
	{ GEN7_RBBM_CLOCK_CNTL_UCHE, 0x22222222 },
	{ GEN7_RBBM_CLOCK_CNTL2_UCHE, 0x00222222 },
	{ GEN7_RBBM_CLOCK_HYST_UCHE, 0x00000444 },
	{ GEN7_RBBM_CLOCK_DELAY_UCHE, 0x00000222 },
	{ GEN7_RBBM_CLOCK_CNTL_RB0, 0x22222222 },
	{ GEN7_RBBM_CLOCK_CNTL2_RB0, 0x01002222 },
	{ GEN7_RBBM_CLOCK_CNTL_CCU0, 0x00002220 },
	{ GEN7_RBBM_CLOCK_HYST_RB_CCU0, 0x44000f00 },
	{ GEN7_RBBM_CLOCK_CNTL_RAC, 0x25222022 },
	{ GEN7_RBBM_CLOCK_CNTL2_RAC, 0x00555555 },
	{ GEN7_RBBM_CLOCK_DELAY_RAC, 0x00000011 },
	{ GEN7_RBBM_CLOCK_HYST_RAC, 0x00440044 },
	{ GEN7_RBBM_CLOCK_CNTL_TSE_RAS_RBBM, 0x04222222 },
	{ GEN7_RBBM_CLOCK_MODE2_GRAS, 0x00000222 },
	{ GEN7_RBBM_CLOCK_MODE_BV_GRAS, 0x00222222 },
	{ GEN7_RBBM_CLOCK_MODE_GPC, 0x02222223 },
	{ GEN7_RBBM_CLOCK_MODE_VFD, 0x00222222 },
	{ GEN7_RBBM_CLOCK_MODE_BV_GPC, 0x00222222 },
	{ GEN7_RBBM_CLOCK_MODE_BV_VFD, 0x00002222 },
	{ GEN7_RBBM_CLOCK_HYST_TSE_RAS_RBBM, 0x00000000 },
	{ GEN7_RBBM_CLOCK_HYST_GPC, 0x04104004 },
	{ GEN7_RBBM_CLOCK_HYST_VFD, 0x00000000 },
	{ GEN7_RBBM_CLOCK_DELAY_TSE_RAS_RBBM, 0x00000000 },
	{ GEN7_RBBM_CLOCK_DELAY_GPC, 0x00000200 },
	{ GEN7_RBBM_CLOCK_DELAY_VFD, 0x00000000 },
	{ GEN7_RBBM_CLOCK_MODE_HLSQ, 0x00002222 },
	{ GEN7_RBBM_CLOCK_DELAY_HLSQ, 0x00000000 },
	{ GEN7_RBBM_CLOCK_HYST_HLSQ, 0x00000000 },
	{ GEN7_RBBM_CLOCK_MODE_BV_LRZ, 0x55555552 },
	{ GEN7_RBBM_CLOCK_HYST2_VFD, 0x00000000 },
	{ GEN7_RBBM_CLOCK_MODE_CP, 0x00000222 },
	{ GEN7_RBBM_CLOCK_CNTL, 0x8aa8aa82 },
	{ GEN7_RBBM_ISDB_CNT, 0x00000182 },
	{ GEN7_RBBM_RAC_THRESHOLD_CNT, 0x00000000 },
	{ GEN7_RBBM_SP_HYST_CNT, 0x00000000 },
	{ GEN7_RBBM_CLOCK_CNTL_GMU_GX, 0x00000222 },
	{ GEN7_RBBM_CLOCK_DELAY_GMU_GX, 0x00000111 },
	{ GEN7_RBBM_CLOCK_HYST_GMU_GX, 0x00000555 },
};

/* GEN7_0_0 protected register list */
static const struct gen7_protected_regs gen7_0_0_protected_regs[] = {
	{ GEN7_CP_PROTECT_REG + 0, 0x00000, 0x004ff, 0 },
	{ GEN7_CP_PROTECT_REG + 1, 0x0050b, 0x00563, 0 },
	{ GEN7_CP_PROTECT_REG + 2, 0x0050e, 0x0050e, 1 },
	{ GEN7_CP_PROTECT_REG + 3, 0x00510, 0x00510, 1 },
	{ GEN7_CP_PROTECT_REG + 4, 0x00534, 0x00534, 1 },
	{ GEN7_CP_PROTECT_REG + 5, 0x005fb, 0x00698, 0 },
	{ GEN7_CP_PROTECT_REG + 6, 0x00699, 0x00882, 1 },
	{ GEN7_CP_PROTECT_REG + 7, 0x008a0, 0x008a8, 1 },
	{ GEN7_CP_PROTECT_REG + 8, 0x008ab, 0x008cf, 1 },
	{ GEN7_CP_PROTECT_REG + 9, 0x008d0, 0x00a40, 0 },
	{ GEN7_CP_PROTECT_REG + 10, 0x00900, 0x0094d, 1 },
	{ GEN7_CP_PROTECT_REG + 11, 0x0098d, 0x00a3f, 1 },
	{ GEN7_CP_PROTECT_REG + 12, 0x00a41, 0x00bff, 1 },
	{ GEN7_CP_PROTECT_REG + 13, 0x00df0, 0x00df1, 1 },
	{ GEN7_CP_PROTECT_REG + 14, 0x00e01, 0x00e01, 1 },
	{ GEN7_CP_PROTECT_REG + 15, 0x00e07, 0x00e0f, 1 },
	{ GEN7_CP_PROTECT_REG + 16, 0x03c00, 0x03cc3, 1 },
	{ GEN7_CP_PROTECT_REG + 17, 0x03cc4, 0x05cc3, 0 },
	{ GEN7_CP_PROTECT_REG + 18, 0x08630, 0x087ff, 1 },
	{ GEN7_CP_PROTECT_REG + 19, 0x08e00, 0x08e00, 1 },
	{ GEN7_CP_PROTECT_REG + 20, 0x08e08, 0x08e08, 1 },
	{ GEN7_CP_PROTECT_REG + 21, 0x08e50, 0x08e6f, 1 },
	{ GEN7_CP_PROTECT_REG + 22, 0x08e80, 0x09100, 1 },
	{ GEN7_CP_PROTECT_REG + 23, 0x09624, 0x097ff, 1 },
	{ GEN7_CP_PROTECT_REG + 24, 0x09e40, 0x09e40, 1 },
	{ GEN7_CP_PROTECT_REG + 25, 0x09e64, 0x09e71, 1 },
	{ GEN7_CP_PROTECT_REG + 26, 0x09e78, 0x09fff, 1 },
	{ GEN7_CP_PROTECT_REG + 27, 0x0a630, 0x0a7ff, 1 },
	{ GEN7_CP_PROTECT_REG + 28, 0x0ae02, 0x0ae02, 1 },
	{ GEN7_CP_PROTECT_REG + 29, 0x0ae50, 0x0ae5f, 1 },
	{ GEN7_CP_PROTECT_REG + 30, 0x0ae66, 0x0ae69, 1 },
	{ GEN7_CP_PROTECT_REG + 31, 0x0ae6f, 0x0ae72, 1 },
	{ GEN7_CP_PROTECT_REG + 32, 0x0b604, 0x0b607, 1 },
	{ GEN7_CP_PROTECT_REG + 33, 0x0ec00, 0x0fbff, 1 },
	{ GEN7_CP_PROTECT_REG + 34, 0x0fc00, 0x11bff, 0 },
	{ GEN7_CP_PROTECT_REG + 35, 0x18400, 0x18453, 1 },
	{ GEN7_CP_PROTECT_REG + 36, 0x18454, 0x18458, 0 },
	{ GEN7_CP_PROTECT_REG + 37, 0x18459, 0x1a458, 1 },
	{ GEN7_CP_PROTECT_REG + 38, 0x1a459, 0x1c458, 1 },
	{ GEN7_CP_PROTECT_REG + 39, 0x1c459, 0x1e458, 1 },
	{ GEN7_CP_PROTECT_REG + 40, 0x1f400, 0x1f843, 1 },
	{ GEN7_CP_PROTECT_REG + 41, 0x1f844, 0x1f8bf, 0 },
	{ GEN7_CP_PROTECT_REG + 42, 0x1f860, 0x1f860, 1 },
	{ GEN7_CP_PROTECT_REG + 43, 0x1f878, 0x1f8a2, 1 },
	{ GEN7_CP_PROTECT_REG + 47, 0x1f8c0, 0x1f8c0, 1 },
	{ 0 },
};

static const struct adreno_gen7_core adreno_gpu_core_gen7_0_0 = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_GEN7_0_0,
				UINT_MAX, UINT_MAX, UINT_MAX, 0),
		.compatible = "qcom,adreno-gpu-gen7-0-0",
		.chipid = 0x07030000,
		.features = ADRENO_APRIV | ADRENO_IOCOHERENT |
				ADRENO_CONTENT_PROTECTION | ADRENO_IFPC |
				ADRENO_ACD | ADRENO_L3_VOTE | ADRENO_BCL |
				ADRENO_PREEMPTION,
		.gpudev = &adreno_gen7_gmu_gpudev.base,
		.perfcounters = &adreno_gen7_perfcounters,
		.uche_gmem_alignment = 0,
		.gmem_size = SZ_2M,
		.bus_width = 32,
		.snapshot_size = SZ_4M,
	},
	.gmu_fw_version = GMU_VERSION(4, 0, 0),
	.sqefw_name = "a730_sqe.fw",
	.gmufw_name = "gmu_gen70000.bin",
	.gmufw_bak_name = "c500_gmu.bin",
	.zap_name = "a730_zap",
	.hwcg = gen7_0_0_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(gen7_0_0_hwcg_regs),
	.gbif = gen7_0_0_gbif_regs,
	.gbif_count = ARRAY_SIZE(gen7_0_0_gbif_regs),
	.hang_detect_cycles = 0xcfffff,
	.protected_regs = gen7_0_0_protected_regs,
	.highest_bank_bit = 16,
	.gen7_snapshot_block_list = &gen7_0_0_snapshot_block_list,
	.fast_bus_hint = true,
};

static const struct adreno_gen7_core adreno_gpu_core_gen7_0_1 = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_GEN7_0_1,
				UINT_MAX, UINT_MAX, UINT_MAX, ANY_ID),
		.compatible = "qcom,adreno-gpu-gen7-0-1",
		.chipid = 0x07030001,
		.features = ADRENO_APRIV | ADRENO_IOCOHERENT |
				ADRENO_CONTENT_PROTECTION | ADRENO_IFPC |
				ADRENO_ACD | ADRENO_L3_VOTE | ADRENO_BCL |
				ADRENO_PREEMPTION,
		.gpudev = &adreno_gen7_gmu_gpudev.base,
		.perfcounters = &adreno_gen7_perfcounters,
		.uche_gmem_alignment = 0,
		.gmem_size = SZ_2M,
		.bus_width = 32,
		.snapshot_size = SZ_4M,
	},
	.gmu_fw_version = GMU_VERSION(4, 0, 0),
	.sqefw_name = "a730_sqe.fw",
	.gmufw_name = "gmu_gen70000.bin",
	.gmufw_bak_name = "c500_gmu.bin",
	.zap_name = "a730_zap",
	.hwcg = gen7_0_0_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(gen7_0_0_hwcg_regs),
	.gbif = gen7_0_0_gbif_regs,
	.gbif_count = ARRAY_SIZE(gen7_0_0_gbif_regs),
	.hang_detect_cycles = 0xcfffff,
	.protected_regs = gen7_0_0_protected_regs,
	.highest_bank_bit = 16,
	.gen7_snapshot_block_list = &gen7_0_0_snapshot_block_list,
	.fast_bus_hint = true,
};

static const struct adreno_gen7_core adreno_gpu_core_gen7_4_0 = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_GEN7_4_0,
				UINT_MAX, UINT_MAX, UINT_MAX, ANY_ID),
		.compatible = "qcom,adreno-gpu-gen7-4-0",
		.features = ADRENO_APRIV | ADRENO_IOCOHERENT |
				ADRENO_CONTENT_PROTECTION | ADRENO_L3_VOTE |
				ADRENO_PREEMPTION | ADRENO_IFPC | ADRENO_ACD |
				ADRENO_BCL,
		.gpudev = &adreno_gen7_gmu_gpudev.base,
		.perfcounters = &adreno_gen7_perfcounters,
		.uche_gmem_alignment = 0,
		.gmem_size = SZ_2M,
		.bus_width = 32,
		.snapshot_size = SZ_4M,
	},
	.gmu_fw_version = GMU_VERSION(4, 0, 7),
	.sqefw_name = "a730_sqe.fw",
	.gmufw_name = "gmu_gen70000.bin",
	.gmufw_bak_name = "c500_gmu.bin",
	.zap_name = "a730_zap",
	.hwcg = gen7_0_0_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(gen7_0_0_hwcg_regs),
	.gbif = gen7_0_0_gbif_regs,
	.gbif_count = ARRAY_SIZE(gen7_0_0_gbif_regs),
	.hang_detect_cycles = 0xcfffff,
	.protected_regs = gen7_0_0_protected_regs,
	.highest_bank_bit = 16,
	.gen7_snapshot_block_list = &gen7_0_0_snapshot_block_list,
	.fast_bus_hint = true,
};

static const struct adreno_gen7_core adreno_gpu_core_gen7_3_0 = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_GEN7_3_0,
				UINT_MAX, UINT_MAX, UINT_MAX, 0),
		.compatible = "qcom,adreno-gpu-gen7-3-0",
		.chipid = 0x07010000,
		.features = ADRENO_APRIV | ADRENO_IOCOHERENT |
				ADRENO_CONTENT_PROTECTION | ADRENO_IFPC |
				ADRENO_PREEMPTION | ADRENO_BCL | ADRENO_ACD,
		.gpudev = &adreno_gen7_gmu_gpudev.base,
		.perfcounters = &adreno_gen7_no_cb_perfcounters,
		.uche_gmem_alignment = 0,
		.gmem_size = SZ_512K,
		.bus_width = 32,
		.snapshot_size = SZ_2M,
	},
	.gmu_fw_version = GMU_VERSION(4, 0, 0),
	.sqefw_name = "a710_sqe.fw",
	.gmufw_name = "gmu_gen70000.bin",
	.zap_name = "a710_zap",
	.hwcg = gen7_3_0_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(gen7_3_0_hwcg_regs),
	.gbif = gen7_3_0_gbif_regs,
	.gbif_count = ARRAY_SIZE(gen7_3_0_gbif_regs),
	.hang_detect_cycles = 0xcfffff,
	.protected_regs = gen7_0_0_protected_regs,
	.highest_bank_bit = 15,
	.gen7_snapshot_block_list = &gen7_3_0_snapshot_block_list,
};

static const struct adreno_gen7_core adreno_gpu_core_gen7_6_0 = {
	.base = {
		DEFINE_ADRENO_REV(ADRENO_REV_GEN7_6_0,
				UINT_MAX, UINT_MAX, UINT_MAX, ANY_ID),
		.compatible = "qcom,adreno-gpu-gen7-6-0",
		.features = ADRENO_APRIV | ADRENO_IOCOHERENT |
				ADRENO_CONTENT_PROTECTION | ADRENO_L3_VOTE |
				ADRENO_IFPC | ADRENO_PREEMPTION | ADRENO_BCL |
				ADRENO_ACD | ADRENO_LPAC | ADRENO_DMS,
		.gpudev = &adreno_gen7_hwsched_gpudev.base,
		.perfcounters = &adreno_gen7_hwsched_perfcounters,
		.uche_gmem_alignment = SZ_16M,
		.gmem_size = 3 * SZ_1M,
		.bus_width = 32,
		.snapshot_size = SZ_4M,
	},
	.gmu_fw_version = GMU_VERSION(4, 1, 9),
	.sqefw_name = "a740v3_sqe.fw",
	.gmufw_name = "gmu_gen70200.bin",
	.zap_name = "a740v3_zap",
	.hwcg = gen7_6_0_hwcg_regs,
	.hwcg_count = ARRAY_SIZE(gen7_6_0_hwcg_regs),
	.gbif = gen7_0_0_gbif_regs,
	.gbif_count = ARRAY_SIZE(gen7_0_0_gbif_regs),
	.hang_detect_cycles = 0xcfffff,
	.protected_regs = gen7_0_0_protected_regs,
	.highest_bank_bit = 16,
	.gmu_hub_clk_freq = 200000000,
	.bcl_data = 1,
	.gen7_snapshot_block_list = &gen7_6_0_snapshot_block_list,
	.qos_value = gen7_6_0_gbif_client_qos_values,
	.ctxt_record_size = (4192 * SZ_1K),
};

static const struct adreno_gpu_core *adreno_gpulist[] = {
	&adreno_gpu_core_a630v1,	/* Deprecated */
	&adreno_gpu_core_a630v2.base,
	&adreno_gpu_core_a615.base,
	&adreno_gpu_core_a618.base,
	&adreno_gpu_core_a619.base,
	&adreno_gpu_core_a619_variant.base,
	&adreno_gpu_core_a620.base,
	&adreno_gpu_core_a621.base,
	&adreno_gpu_core_a635.base,
	&adreno_gpu_core_a640.base,
	&adreno_gpu_core_a650.base,
	&adreno_gpu_core_a650v2.base,
	&adreno_gpu_core_a660.base,
	&adreno_gpu_core_a660v2.base,
	&adreno_gpu_core_a680.base,
	&adreno_gpu_core_a612.base,
	&adreno_gpu_core_a616.base,
	&adreno_gpu_core_a610.base,
	&adreno_gpu_core_a660_shima.base,
	&adreno_gpu_core_gen6_3_26_0.base,
	&adreno_gpu_core_gen7_0_0.base,
	&adreno_gpu_core_gen7_0_1.base,
	&adreno_gpu_core_a662.base,
	&adreno_gpu_core_gen7_4_0.base,
	&adreno_gpu_core_gen7_3_0.base,
	&adreno_gpu_core_gen7_6_0.base,

};
